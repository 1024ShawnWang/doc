
s='wangxu'

#print( string.ascii_letters)

#注意看源代码，就解决了 Lib/string.py

#whitespace包括 ntrfv   \n   \t      \r          \f      \v  空格，制表，换行，回车，纵向制表
                    #  换行  制表   回车     空格      纵向制表
                    #回车用来创建新的段落，它会使得光标移到行开头，但是换行只会增添新的一行，光标的位置直接下移？

#最初是因为打字机是机械的，每一行打完，移动到新的一行的开头，需要0.2s，恰好是两个字符的时间，也就导致了这段时间内输入的两个字符会丢失
#办法就是，用两个特定字符表示换行，同时也用来填充这段时间。所以最开始，打字员输入 \r\n，就可以控制打字机移到下一行的行首（其中，\r是carriage return
#是让打印机回到行首，\n是纵向移动到下一行

#之后，计算机集成了这个概念，但是系统不同，实现不同，windows是守旧的继承者，原原本本的使用了这个方法去实现换行
#但是 unix，坚持一个字母就够了，使用了\n (nextline)来表示下一行，并且行首

#1观察光标位置，在解释器中交互
print('wangxu')
print('wangxu\r')
#发现没有什么区别，因为主要是移动光标（打字机机头），但是程序不会显示所以看不出来

#2.\t \v
print('wang\txu')
print('wang\vxu')
#\t水平制表，在0，8，16.。。。。。。位置开始, \v会在wang下面一行的后面直接开始输出

#3.相同的string序列，会因为系统的不同读取出不同的内容
