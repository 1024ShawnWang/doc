
#1.线程就是进程的某一个部分

          cpu            io         cpu

进程1    ---------(线程1.1)         ------（线程1.2)
进程2                     ....(线程2.1)


#2. 由于GIL( global interepter lock)的存在，任意时刻python只能由一个线程在运行

#2.1 为什么会有GIL，因为垃圾回收器 是通过检查对象引用个数，来决定是否回收对象（将内存地址标记为可用）

假设有两个线程需要释放对 obj的引用，也是全部的obj的引用

当然有如下的可能

            线程a                                               线程b
               |                                                   |            
               |                                                   |
               V                                                   |
            obj.ref -=1  ----->(系统正好调度，切换到另一个线程)    V
                                                                 obj.ref -=1 (ref此时==0)
                                                                   |
                                                                   V
             free obj    <---------------------------------------free obj (因为 obj.ref==0)
             |
             |
             V
            报错，因为 obj 已经被线程b 给释放掉了，不可能再释放一次

但是有了 gil 之后， 使用gil对 引用数量 加锁，确保了某段时刻只有一个线程可以 访问引用数量这个资源

#3.由于 gil 的存在， 对于io密集的程序， 多线程可以降低时间
对于 cpu密集的程序，多线程的 线程调度 会花费额外的时间，会增加时间，不推荐

#4. 为了解决cpu密集的程序， 开发了模块 多进程(充分利用多核cpu的能力
#这是因为一个进程，它可以产生子进程（ linux系统中的fork函数就可以创造一个几乎一样的子进程)

#5.这也说明了进程和线程的不同， 对于同一个进程的不同线程，它们共享资源，因此写入操作需要锁来确保安全
对于不同进程来说，它们的资源完全隔离，不同进程之间完全没有这个烦恼

#6. 这也说明了，多进程是如何利用多核cpu的，它们是在不同的cpu核心，不同的内存区域工作的

#7.同一进程的不同线程是 同一空间的不同时间 的进程，(年轻时候的你，老了的你, 多线程就是两个你，用相同的资源去做同一件事情，当然就快一些）

#7.1 不同进程就是完全不同的人了

